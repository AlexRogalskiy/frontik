<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

    <xsl:template name="highlight-js">
        <script>
            <![CDATA[
                const codeBlocks = [];

                const blob = new Blob([`
                    /*! highlight.js v9.17.1 | BSD3 License | git.io/hljslicense */
                    ${atob('')}

                    self.onmessage = ({data}) => {
                        const {index, language, code} = data;
                        if (self.hljs.getLanguage(language)) {
                            const highlightedCode = self.hljs.highlight(language, code).value;
                            postMessage({
                                index,
                                highlightedCode
                            });
                        }
                    }
                `]);
                const blobURL = URL.createObjectURL(blob);
                const worker = new Worker(blobURL);
                setTimeout(() => worker.terminate(), 10000);

                worker.onmessage = ({data}) => {
                    const {index, highlightedCode} = data;
                    codeBlocks[index].innerHTML = highlightedCode;
                    codeBlocks[index].classList.add('hljs');
                }

                document.addEventListener('DOMContentLoaded', (event) => {
                    document.querySelectorAll('.highlighted-code').forEach((block) => {
                        const index = codeBlocks.push(block) - 1;
                        worker.postMessage({
                            index,
                            language: block.classList[0],
                            code: block.textContent
                        });
                    });
                });
            ]]>
        </script>
    </xsl:template>

</xsl:stylesheet>
